}
n.fa.carbons <- (carbon.total - 3)
#TG(16:0/16:0/16:0)+Na has 3 RDB in [M+H]+
}
if(n.double.bonds>=0){
return(paste0(species,n.fa.carbons,":",n.double.bonds,")"))
}else{
return(paste0("Invalid result: Number of double bonds calculated to be: ",n.double.bonds,". Check ion mode and composition"))
}
}
#these are wrapper functions to used implement functions above over vectors/columns
get_general_structure_over_vector<-function(carbon.total,rdb.equiv,species,ionmode){
if(!(species %in% all.species)){
return("")
}else{
result<-get_general_structure(carbon.total,rdb.equiv,species,ionmode)
result<-ifelse(grepl("nvalid",result,ignore.case = T),"",result)
return(result)
}
}
return_num_elements <- function(element_letter,column_of_df){
sapply(column_of_df,function(x) extract_num_elements(element_letter,x))
}
library(OrgMassSpecR)
isotope.dist.function <- function(num.carbon, num.13.carbon,parent.intensity)
{
IsotopicDistribution(formula = list(C = num.carbon),charge=1 )$percent[1+num.13.carbon]*0.01*parent.intensity
}
pc <- read.csv('df_pc_posion_correctedmz_comp.csv') %>%
mutate(ion.mode = "positive",
species = "pc")
sm<-read.csv('df_sm_posion_correctedmz_comp.csv')%>%
mutate(ion.mode = "positive",
species = "sm")
pa<-read.csv('df_pa_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "pa")
ps<-read.csv('df_ps_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "ps")
pe<-read.csv('df_pe_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "pe")
cer<-read.csv('df_ceramides_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "cer")
pg<-read.csv('df_pg_negion_correctedmz_comp.csv') %>%
mutate(ion.mode = "negative",
species = "pg")
pi<-read.csv('df_pi_negion_correctedmz_comp.csv') %>%
mutate(ion.mode = "negative",
species = "pi")
#"neg.ion" for ion.mode
clean_each_species_df <- function(data.frame,ion.mode,n.samples.total.in.ion.mode){
if(ion.mode == "neg.ion"){
hydrogen.modifier <- 1
}else{
hydrogen.modifier <- (-1)
}
data.frame <- data.frame %>%
mutate(carbons = return_num_elements("C",mf),
hydrogens = return_num_elements("H",mf) - hydrogen.modifier,
oxygens = return_num_elements("O",mf),
nitrogens = return_num_elements("N",mf),
phosphates = return_num_elements("P",mf),
carbon_isotope = return_num_elements("[13C]",mf),
condition = str_sub(fullsample,start = 1, end = 2)) %>%
mutate(rdb.equiv = ( (carbons+carbon_isotope) - (hydrogens/2) + ((nitrogens+phosphates)/2) +1 ))
data.frame$species_class <- mapply(assign_species,(data.frame$carbons+data.frame$carbon_isotope),data.frame$hydrogens,data.frame$oxygens,data.frame$nitrogens,data.frame$phosphates,0,as.numeric(data.frame$rdb.equiv),ion.mode,SIMPLIFY = T)
data.frame$structure <- mapply(get_general_structure_over_vector,(data.frame$carbons+data.frame$carbon_isotope),data.frame$rdb.equiv,data.frame$species_class,ion.mode,SIMPLIFY = T)
data.frame %>% filter(structure != "",abs(ppm) < 2.5) %>%
group_by(mf) %>%
mutate(n = n()) %>%
ungroup() %>%
dplyr::filter(n >= (n.samples.total.in.ion.mode-2)) %>%
dplyr::select(!c(X,Unnamed..0,mz,intensity,theo.mass,delta,comp,add.info,rep,sample_loc_row,slope,yint,error,info,species,n,condition))
}
pi<-clean_each_species_df(pi,"neg.ion",16) %>%
filter(rel.intensity != 100)
pg<-clean_each_species_df(pg,"neg.ion",16)%>%
filter(rel.intensity != 100)
cer<-clean_each_species_df(cer,"neg.ion",16)%>%
filter(rel.intensity != 100)
pe<-clean_each_species_df(pe,"neg.ion",16)
ps<-clean_each_species_df(ps,"neg.ion",16)%>%
filter(rel.intensity != 100)
pa<-clean_each_species_df(pa,"neg.ion",16)%>%
filter(rel.intensity != 100,
!(correctedmz %in% unique((pe %>% filter(abs(chemcalc_error)<=0.0005))$correctedmz)))
pc<-clean_each_species_df(pc,"pos.ion",13)
sm<-clean_each_species_df(sm,"pos.ion",13)%>%
filter(rel.intensity != 100)
df<-rbind(rbind(rbind(rbind(rbind(pc,sm),rbind(pa,ps)),pe),cer),rbind(pg,pi)) %>%
filter(ifelse(ion.mode=="positive",species_class == "PC" | species_class == "SM",species_class %in% all.species[all.species != "PC" & all.species != "SM"]))
long.df <- df %>% dplyr::select(c("rel.intensity","fullsample","mf")) %>%
dplyr::rename("sample" = "fullsample",
"comp" = "mf")
wide.matrix <- as.matrix(long.df %>% pivot_wider(names_from = sample,
values_from = rel.intensity,values_fn = mean))
is.numeric(wide.matrix)
wide.matrix
rownames(wide.matrix)<-wide.matrix[,1]
wide.matrix<-wide.matrix[,-1]
convert_to_numeric <- function(m){
m2 <- apply(m,2,as.numeric)
colnames(m2) <- colnames(m)
rownames(m2) <- rownames(m)
return(m2)
}
wide.matrix<-convert_to_numeric(wide.matrix)
is.numeric(wide.matrix)
is.matrix(wide.matrix)
nrow(wide.matrix)
as.matrix(m)
long.df <- df %>% dplyr::select(c("rel.intensity","fullsample","mf")) %>%
dplyr::rename("sample" = "fullsample",
"comp" = "mf")
wide.matrix <- as.matrix(long.df %>% pivot_wider(names_from = sample,
values_from = rel.intensity,values_fn = mean))
head(wide.matrix)
convert_to_numeric(wide.matrix)
is.matrix(wide.matrix)
nrow(wide.matrix)>100
is.numeric(wide.matrix)
head(convert_to_numeric(wide.matrix))
sapply(wide.matrix,function(x) all(is.numeric(x)))
apply(wide.matrix,2,function(x) all(is.numeric(x)))
apply(wide.matrix,2,function(x) (is.numeric(x)))
most<-function(x){
return( (length(which(x))/length(x)) > 0.95 )
}
apply(wide.matrix,2,function(x) most(is.numeric(x)))
apply(wide.matrix,2,mean)
apply(wide.matrix,2,function(x) mean(x,na.rm = T))
apply(wide.matrix, 2, function(x) median(x, na.rm = T))
long.df <- df %>% dplyr::select(c("rel.intensity","fullsample","mf")) %>%
dplyr::rename("sample" = "fullsample",
"comp" = "mf")
wide.matrix <- as.matrix(long.df %>% pivot_wider(names_from = sample,
values_from = rel.intensity,values_fn = mean))
is.matrix(wide.matrix)
is.numeric(wide.matrix)
head(convert_to_numeric(wide.matrix))
m<-head(convert_to_numeric(wide.matrix))
preprocessCore::normalize.quantiles(m)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyr)
library(ggrepel)
library(svglite)
extract_num_elements <- function(element_letter,composition){
if(element_letter=="N"|element_letter=="n"){
element_letter<-"N(?!a)"
}
#if there is a square bracket (i.e. if it's an isotope), substitute in the double brackets so it works with regex below
if(grepl("\\[",element_letter)){
element_letter<-gsub("\\[","\\\\[",element_letter)
element_letter<-gsub("\\]","\\\\]",element_letter)
}
num <- ifelse(!grepl(element_letter,composition,perl = T,ignore.case = T),
#paste0(element_letter,"(?=\\s)|",element_letter,"(?=[0-9]+)|",element_letter,"$")
0,  #return zero
ifelse(!grepl(paste0("(?<=",element_letter,")[0-9]+|(?<=",element_letter,"\\s)[0-9]+"),composition,perl = T,ignore.case = T), #else,
1,
as.numeric(regmatches(composition,regexpr(paste0("(?<=",element_letter,")[0-9]+|(?<=",element_letter,"\\s)[0-9]+"),composition,perl = T,ignore.case = T)))))
return(num)
}
all.species <- c("LPA(",paste0("PA",c("(O-","(P-","(")),
"LPI(",paste0("PI",c("(O-","(P-","(")),
"LPG(",paste0("PG",c("(O-","(P-","(")),
"LPS(",paste0("PS",c("(O-","(P-","(")),
"LPE(",paste0("PE",c("(O-","(P-","(")),
"LPC(",paste0("PC",c("(O-","(P-","(")),
"SM(","Ceramide(","DAG(","TAG(")
assign.el.vs.plasmalogen.vs.lyso <- function(c,o,rdb,max.o,general.class,base.carbons,lyso.carbon.cutoff,ion.mode,base.rdb){
if(ion.mode == "neg.ion"){
additive <- 1
}else{
additive <- 0
}
if(o == max.o){
#not an EL or lyso- species
return(paste0(general.class,"("))
}else{
#either an EL or lyso-species (but not both, as that would be o-2)
if((c - base.carbons) <= lyso.carbon.cutoff){
#lyso species
return(paste0("L",general.class,"("))
}else{
#an EL
if(rdb == (base.rdb + additive - 1)){
#a non-plasmalogen EL
return(paste0(general.class,"(O-"))
#return(paste0("el",general.class))
}else{
#a plasmalogen
return(paste0(general.class,"(P-"))
#return(paste0("p",general.class))
}
}
}
}
assign_species <- function(c,h,o,n,p,na,rdb,ion.mode){
lyso.carbon.cutoff.value <- 27
if(is.na(rdb)){
return("")
}
if(na == 1){
# mass of [M+Na]+ ions are exactly equal to exact mass + Na(22.989769)-1e(0.00055)
if( n == 0 && o == 5 && p == 0){
# i actually think this should have RDB = int
# mass of [M+Na]+ ions are exactly equal to exact mass + Na(22.989769)-1e(0.00055)
# DAG O5; Na 1; C33-65 for Na+ adduct (positive ion)
return("DAG(")
}
if(n == 0 && o == 6 && p == 0){
# i actually think this should have RDB = int
# mass of [M+Na]+ ions are exactly equal to exact mass + Na(22.989769)-1e(0.00055)
# TAG O6; Na 1; C43-75 for Na+ adduct (positive ion)
return("TAG(")
}else{
return("Species not detected (traceback: one Na but none of DAG or TAG)")
}
}
if(rdb %% 1 == 0){
return(paste0("RDB is an integer. This species is not real. Ensure you input the composition of the ion as detected by MS"))
}else{
if(n == 0){
#pa, pg, or pi
if(o >=7 && o<= 8 && p == 1 && na == 0){
#PA
return(assign.el.vs.plasmalogen.vs.lyso(c,o,rdb,8,"PA",3,lyso.carbon.cutoff.value,ion.mode,1.5))
}
if(o >=9 && o<= 10 && p == 1 && na == 0){
#PG
return(assign.el.vs.plasmalogen.vs.lyso(c,o,rdb,10,"PG",6,lyso.carbon.cutoff.value,ion.mode,1.5))
}
if(o >=12 && o<= 13 && p <= 1 && na == 0){
#PI
return(assign.el.vs.plasmalogen.vs.lyso(c,o,rdb,13,"PI",9,lyso.carbon.cutoff.value,ion.mode,2.5))
}
#this isn't right b/c CL forms a charge of 2, so everything is cut in half
#but i am pretty sure we want to look for cardiolipin asn an [M-2H]2- ion, so everything divided by 2
#if( o == 17 && p == 2 && na == 0)
else{
return("Species not detected (traceback: zero nitrogen but none of: PA, PG, or PI)")
}
}
if(n == 2){
if(p == 1 && o >= 5 && o<= 7 && na == 0){
return("SM(")
}else{
return("Species not detected (traceback: 2 nitrogen but not SM")
}
}
if(n == 1){
if(p == 0 && o >= 3 && o <= 4 && na == 0){
#if o == 4 it could be MAG+NH4 adduct
return("Ceramide(")
}
if(p == 0 && o == 5 && na == 0){
#DAG: DAG O5 N1; C33-65 for NH4+ adduct (positive ion mode)
return("DAG(")
#sodium adduct DAG has base 2 RDB in positive ion mode
#NH4+ adduct DAG has base 0.5 RDB in positive ion mode
}
if(p == 0 && o == 6 && na == 0){
#TAG: TAG O 6; N 1; C 43-75 for NH4+ adduct (positive ion mode)
return("TAG(")
#TG(16:0/16:0/16:0)+Na has 3 RDB in [M+H]+
#TG(16:0/16:0/16:0)+NH4+ has 1.5 RDB in [M+H]+, but I don't think it should change for this species in [M-H]-
}
if(p == 1 && o >= 9 && o <= 10 && na == 0){
#"PS"
return(assign.el.vs.plasmalogen.vs.lyso(c,o,rdb,10,"PS",6,lyso.carbon.cutoff.value,ion.mode,2.5))
}
if(p == 1 && o>=7 && o<=8 && na == 0){
if((c %% 2) == 0) {
#PC
return(assign.el.vs.plasmalogen.vs.lyso(c,o,rdb,8,"PC",8,lyso.carbon.cutoff.value,ion.mode,1.5))
}else{
#PE
return(assign.el.vs.plasmalogen.vs.lyso(c,o,rdb,8,"PE",5,lyso.carbon.cutoff.value,ion.mode,1.5))
}
}else{
return("Species not detected (traceback: 1 nitrogen but none of: Ceramide, DAG, TAG, PS, PC, or PE")
}
}
return("Species not detected (traceback: RDB is not an integer but species has 3 or more nitrogens)")
}
}
get_general_structure <- function(carbon.total,rdb.equiv,species,ionmode){
if(ionmode == "neg.ion"){
additive <- 1
}else{
additive <- 0
}
#c("PA","PG","PI","SM","Ceramide","PS","PC","PE")
if(grepl("PA",species)){
n.double.bonds <- (rdb.equiv - (1.5+additive))
n.fa.carbons <- (carbon.total - 3)
if(grepl("O-",species) | grepl("^L",species)){
n.double.bonds <- n.double.bonds+1
}
}
if(grepl("PG",species)){
n.double.bonds <-  (rdb.equiv - (1.5+additive))
n.fa.carbons <- (carbon.total - 6)
if(grepl("O-",species) | grepl("^L",species)){
n.double.bonds <- n.double.bonds+1
}
}
if(grepl("PI",species)){
n.double.bonds <-  (rdb.equiv - (2.5+additive))
n.fa.carbons <- (carbon.total - 9)
if(grepl("O-",species) | grepl("^L",species)){
n.double.bonds <- n.double.bonds+1
}
}
if(grepl("SM",species)){
n.double.bonds <-  (rdb.equiv - (0.5+additive))
n.fa.carbons <- (carbon.total - 5)
}
if(grepl("Ceramide",species)){
n.double.bonds <-  (rdb.equiv - (0.5+additive))
n.fa.carbons <- (carbon.total - 0)
}
if(grepl("PS",species)){
n.double.bonds <-  (rdb.equiv - (2.5+additive))
n.fa.carbons <- (carbon.total - 6)
if(grepl("O-",species) | grepl("^L",species)){
n.double.bonds <- n.double.bonds+1
}
}
if(grepl("PC",species)){
n.double.bonds <-  (rdb.equiv - (1.5+additive))
n.fa.carbons <- (carbon.total - 8)
if(grepl("O-",species) | grepl("^L",species)){
n.double.bonds <- n.double.bonds+1
}
}
if(grepl("PE",species)){
n.double.bonds <-  (rdb.equiv - (1.5+additive))
n.fa.carbons <- (carbon.total - 5)
if(grepl("O-",species) | grepl("^L",species)){
n.double.bonds <- n.double.bonds+1
}
}
if(grepl("DAG",species)){
if(rdb.equiv %% 1 == 0){
#RDB is an int -> sodium adduct DAG
#sodium adduct DAG has base 2 RDB in positive ion mode
n.double.bonds <-  (rdb.equiv - (2))
#don't add additive here b/c I don't think its RDB.equivs would change in positve vs. negative ion mode
}else{
#NH4+ adduct DAG has base 0.5 RDB in positive ion mode
n.double.bonds <-  (rdb.equiv - (0.5))
#don't add additive here b/c I don't think its RDB.equivs would change in positve vs. negative ion mode
}
n.fa.carbons <- (carbon.total - 3)
}
if(grepl("TAG",species)){
if(rdb.equiv %% 1 == 0){
#RDB is an int -> sodium adduct
#TG(16:0/16:0/16:0)+Na has 3 RDB in [M+H]+
n.double.bonds <-  (rdb.equiv - (3))
#don't add additive here b/c I don't think its RDB.equivs would change in positve vs. negative ion mode
}else{
#TG(16:0/16:0/16:0)+NH4+ has 1.5 RDB in [M+H]+, but I don't think it should change for this species in [M-H]-
n.double.bonds <-  (rdb.equiv - (1.5))
#don't add additive here b/c I don't think its RDB.equivs would change in positve vs. negative ion mode
}
n.fa.carbons <- (carbon.total - 3)
#TG(16:0/16:0/16:0)+Na has 3 RDB in [M+H]+
}
if(n.double.bonds>=0){
return(paste0(species,n.fa.carbons,":",n.double.bonds,")"))
}else{
return(paste0("Invalid result: Number of double bonds calculated to be: ",n.double.bonds,". Check ion mode and composition"))
}
}
#these are wrapper functions to used implement functions above over vectors/columns
get_general_structure_over_vector<-function(carbon.total,rdb.equiv,species,ionmode){
if(!(species %in% all.species)){
return("")
}else{
result<-get_general_structure(carbon.total,rdb.equiv,species,ionmode)
result<-ifelse(grepl("nvalid",result,ignore.case = T),"",result)
return(result)
}
}
return_num_elements <- function(element_letter,column_of_df){
sapply(column_of_df,function(x) extract_num_elements(element_letter,x))
}
library(OrgMassSpecR)
isotope.dist.function <- function(num.carbon, num.13.carbon,parent.intensity)
{
IsotopicDistribution(formula = list(C = num.carbon),charge=1 )$percent[1+num.13.carbon]*0.01*parent.intensity
}
pc <- read.csv('df_pc_posion_correctedmz_comp.csv') %>%
mutate(ion.mode = "positive",
species = "pc")
sm<-read.csv('df_sm_posion_correctedmz_comp.csv')%>%
mutate(ion.mode = "positive",
species = "sm")
pa<-read.csv('df_pa_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "pa")
ps<-read.csv('df_ps_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "ps")
pe<-read.csv('df_pe_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "pe")
cer<-read.csv('df_ceramides_negion_correctedmz_comp.csv')%>%
mutate(ion.mode = "negative",
species = "cer")
pg<-read.csv('df_pg_negion_correctedmz_comp.csv') %>%
mutate(ion.mode = "negative",
species = "pg")
pi<-read.csv('df_pi_negion_correctedmz_comp.csv') %>%
mutate(ion.mode = "negative",
species = "pi")
#"neg.ion" for ion.mode
clean_each_species_df <- function(data.frame,ion.mode,n.samples.total.in.ion.mode){
if(ion.mode == "neg.ion"){
hydrogen.modifier <- 1
}else{
hydrogen.modifier <- (-1)
}
data.frame <- data.frame %>%
mutate(carbons = return_num_elements("C",mf),
hydrogens = return_num_elements("H",mf) - hydrogen.modifier,
oxygens = return_num_elements("O",mf),
nitrogens = return_num_elements("N",mf),
phosphates = return_num_elements("P",mf),
carbon_isotope = return_num_elements("[13C]",mf),
condition = str_sub(fullsample,start = 1, end = 2)) %>%
mutate(rdb.equiv = ( (carbons+carbon_isotope) - (hydrogens/2) + ((nitrogens+phosphates)/2) +1 ))
data.frame$species_class <- mapply(assign_species,(data.frame$carbons+data.frame$carbon_isotope),data.frame$hydrogens,data.frame$oxygens,data.frame$nitrogens,data.frame$phosphates,0,as.numeric(data.frame$rdb.equiv),ion.mode,SIMPLIFY = T)
data.frame$structure <- mapply(get_general_structure_over_vector,(data.frame$carbons+data.frame$carbon_isotope),data.frame$rdb.equiv,data.frame$species_class,ion.mode,SIMPLIFY = T)
data.frame %>% filter(structure != "",abs(ppm) < 2.5) %>%
group_by(mf) %>%
mutate(n = n()) %>%
ungroup() %>%
dplyr::filter(n >= (n.samples.total.in.ion.mode-2)) %>%
dplyr::select(!c(X,Unnamed..0,mz,intensity,theo.mass,delta,comp,add.info,rep,sample_loc_row,slope,yint,error,info,species,n,condition))
}
pi<-clean_each_species_df(pi,"neg.ion",16) %>%
filter(rel.intensity != 100)
pg<-clean_each_species_df(pg,"neg.ion",16)%>%
filter(rel.intensity != 100)
cer<-clean_each_species_df(cer,"neg.ion",16)%>%
filter(rel.intensity != 100)
pe<-clean_each_species_df(pe,"neg.ion",16)
ps<-clean_each_species_df(ps,"neg.ion",16)%>%
filter(rel.intensity != 100)
pa<-clean_each_species_df(pa,"neg.ion",16)%>%
filter(rel.intensity != 100,
!(correctedmz %in% unique((pe %>% filter(abs(chemcalc_error)<=0.0005))$correctedmz)))
pc<-clean_each_species_df(pc,"pos.ion",13)
sm<-clean_each_species_df(sm,"pos.ion",13)%>%
filter(rel.intensity != 100)
df<-rbind(rbind(rbind(rbind(rbind(pc,sm),rbind(pa,ps)),pe),cer),rbind(pg,pi)) %>%
filter(ifelse(ion.mode=="positive",species_class == "PC" | species_class == "SM",species_class %in% all.species[all.species != "PC" & all.species != "SM"]))
df2 <- df %>% mutate(condition = str_sub(fullsample,start = 1, end = 2)) %>%
group_by(correctedmz) %>%
filter(abs(chemcalc_error) == min(abs(chemcalc_error))) %>%
ungroup() %>%
group_by(mf,condition) %>% mutate(num = n()) %>% ungroup() %>%
group_by(mf) %>%
filter(max(num)>6) %>%
ungroup()
df %>% filter(rel.intensity != 100) %>% ggplot(aes(x = fullsample, y = log2(rel.intensity)))+
geom_boxplot(aes(color = sample))+
#geom_violin(aes(color = sample))+
xlab("")
df2 %>% filter(rel.intensity != 100) %>% ggplot(aes(x = fullsample, y = log2(rel.intensity)))+
geom_boxplot(aes(color = sample))+
#geom_violin(aes(color = sample))+
xlab("")
long.df <- df %>% dplyr::select(c("rel.intensity","fullsample","mf")) %>%
dplyr::rename("sample" = "fullsample",
"comp" = "mf")
wide.matrix <- as.matrix(long.df %>% pivot_wider(names_from = sample,
values_from = rel.intensity,values_fn = mean))
wide.matrix
rownames(wide.matrix)<-wide.matrix[,1]
wide.matrix<-wide.matrix[,-1]
convert_to_numeric <- function(m){
m2 <- apply(m,2,as.numeric)
colnames(m2) <- colnames(m)
rownames(m2) <- rownames(m)
return(m2)
}
wide.matrix<-convert_to_numeric(wide.matrix)
head(wide.matrix)
grep("sc",colnames(wide.matrix),value = T)
c("a","b")
wide.matrix[order(ko5_1),]
long.df
head(long.df)
long.df[order(rel.intensity),]
long.df[order(rel.intensity),]
long.df[order(long.df$rel.intensity),]
wide.matrix
head(wide.matrix)
head(log2(wide.matrix))
setwd('/Users/briankleiboeker/Desktop/Lodhi lab/PexRAP_data_and_grant/20230105 3t3l1 kd pexrap 13c glucose lipidomics/slatR')
devtools::document()
devtools::document()
